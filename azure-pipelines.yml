# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform 0.12.3'
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : azurerm init'
  inputs:
    command: init
    workingDirectory: System.DefaultWorkingDirectory
    backendServiceArm: 'tfvpn'
    backendAzureRmResourceGroupName: terraformbackend
    backendAzureRmStorageAccountName: terraformbackend00
    backendAzureRmContainerName: container1
    backendAzureRmKey: terraform.tfstate

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : azurerm plan'
  inputs:
    command: plan
    workingDirectory: System.DefaultWorkingDirectory
    environmentServiceNameAzureRM: 'tfvpn'
- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : azurerm apply'
  inputs:
    command: apply
    workingDirectory: System.DefaultWorkingDirectory
    environmentServiceNameAzureRM: 'tfvpn'